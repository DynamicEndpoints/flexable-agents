trigger:
  - main

variables:
  azureSubscription: 'Azure subscription'
  webAppName: '$(WebAppName)'
  dockerRegistryServiceConnection: 'docker-registry'
  imageRepository: '$(ImageRepository)'
  containerRegistry: '$(ContainerRegistry)'
  dockerfilePath: 'Dockerfile'
  tag: '$(Build.BuildId)'
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest
    
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: 'infrastructure/**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: Test
  displayName: Test stage
  dependsOn: Build
  jobs:
  - job: Test
    displayName: Run Tests
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.8'
        addToPath: true
    
    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
      displayName: 'Install dependencies'
    
    - script: |
        pytest tests/ --doctest-modules --junitxml=junit/test-results.xml --cov=. --cov-report=xml --cov-report=html
      displayName: 'Run tests'
    
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFiles: '**/test-*.xml'
        testRunTitle: 'Publish test results'
    
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
        reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'

- stage: SecurityScan
  displayName: Security Scan
  dependsOn: Build
  jobs:
  - job: SecurityScan
    displayName: Run Security Scans
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.8'
        addToPath: true
    
    - script: |
        python -m pip install --upgrade pip
        pip install bandit safety
      displayName: 'Install security tools'
    
    - script: |
        bandit -r . -f json -o bandit-results.json
        safety check
      displayName: 'Run security scans'
    
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: 'bandit-results.json'
        ArtifactName: 'SecurityResults'
        publishLocation: 'Container'

- stage: Deploy
  displayName: Deploy stage
  dependsOn: 
  - Test
  - SecurityScan
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: 'production'
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '$(System.ArtifactsDirectory)'
          
          - task: AzureResourceManagerTemplateDeployment@3
            inputs:
              deploymentScope: 'Resource Group'
              azureResourceManagerConnection: '$(azureSubscription)'
              subscriptionId: '$(SubscriptionId)'
              action: 'Create Or Update Resource Group'
              resourceGroupName: '$(ResourceGroupName)'
              location: '$(Location)'
              templateLocation: 'Linked artifact'
              csmFile: '$(System.ArtifactsDirectory)/drop/infrastructure/web_app_template.json'
              overrideParameters: '-webAppName "$(webAppName)" -dockerImage "$(containerRegistry)/$(imageRepository):$(tag)"'
              deploymentMode: 'Incremental'
          
          - task: AzureWebAppContainer@1
            inputs:
              azureSubscription: '$(azureSubscription)'
              appName: $(webAppName)
              containers: '$(containerRegistry)/$(imageRepository):$(tag)'

- stage: Monitoring
  displayName: Setup Monitoring
  dependsOn: Deploy
  jobs:
  - job: ConfigureMonitoring
    displayName: Configure Monitoring
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Enable Application Insights
          az monitor app-insights component update --app $(webAppName)-insights -g $(ResourceGroupName) --sampling-percentage 100
          
          # Create alert rules
          az monitor metrics alert create \
            --name "High CPU Usage" \
            --resource-group $(ResourceGroupName) \
            --scopes $(webAppResourceId) \
            --condition "avg Percentage CPU > 80" \
            --window-size 5m \
            --evaluation-frequency 1m
          
          # Setup diagnostic settings
          az monitor diagnostic-settings create \
            --name "WebAppDiagnostics" \
            --resource $(webAppResourceId) \
            --logs '[{"category": "AppServiceHTTPLogs","enabled": true}]' \
            --metrics '[{"category": "AllMetrics","enabled": true}]' \
            --workspace $(LogAnalyticsWorkspaceId)

- stage: Cleanup
  displayName: Cleanup
  dependsOn: Monitoring
  condition: always()
  jobs:
  - job: Cleanup
    displayName: Cleanup Resources
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: DeleteFiles@1
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: |
          **/*.pyc
          **/__pycache__/**
          .coverage
          htmlcov/**
          .pytest_cache/**
